;==================================================
; Script Name: Remove Trap Circuit Training
; Author: Onkelatze
; Version: 1.00
; Client Tested with: 7.0.76.0
; EUO version tested with: 1.50 ver. xxx
; Shard OSI
; Revision Date: 26/05/19
; Public Release: 29/06/19
; Circuit Trap Kits are available for purchase from the Oddities Trader at the Lycaeum.
; Start Script up to 75 Remove Trap very fast. To busy to solved > 75 gain :D  Only for 9*9!
;==================================================
;==================================================

;0 build board
;x = blocked
;z = maybe
;1 find kit
set #lpc 400
set %trainingkit LBKC
gosub clickthereddata
gosub findkit
gosub initmenu

;open kit
gosub reset

; main loop, never stop.
while #true
{
startover:

chooseSkill remo
if #skill < 1000
   set %size 5 ; change for smaller or bigger
if #skill < 900
   set %size 4 ; change for smaller or bigger
if #skill < 750
   set %size 3 ; change for smaller or bigger
   
  for %x 1 %size
  {
    for %y 1 %size
    {
        set %board . %x , %y zz
    }
  }

  set %jrnl #jindex
  set %wefinished #false
  set %step 23
  set %board11 %step
  set %foundlocatoins 1

  ;loop to solve individual instance of trap
  while ! %wefinished
  {


    menu set status0 %board00 %board10 %board20 %board30 %board40 %board50
    menu set status1 %board01 %board11 %board21 %board31 %board41 %board51
    menu set status2 %board02 %board12 %board22 %board32 %board42 %board52
    menu set status3 %board03 %board13 %board23 %board33 %board43 %board53
    menu set status4 %board04 %board14 %board24 %board34 %board44 %board54
    menu set status5 %board05 %board15 %board25 %board35 %board45 %board55
    menu set status6 %pathright %pathleft %pathup  %pathdown
    menu set status7 %currentx %currenty


      set %toedip %currentx + 1
      set %pathright %toedip , %currenty
      set %toedip %currenty + 1
      set %pathdown %currentx , %toedip
      set %toedip %currentx - 1
      set %pathleft %toedip , %currenty
      set %toedip %currenty - 1
      set %pathup %currentx , %toedip
      
    ;scan journal to see if we succeeded
    while #jindex > %jrnl
    {
        set %jrnl %jrnl + 1
        scanjournal %jrnl
        if You_successfully_disarm in #journal
        {
          set %wefinished #true
          goto startover
       }
    }

      ;check known paths first
      ;look right
      set %conditional %step - 1
      if %board . %pathright = %conditional
      {
         menu set status8 going right
         gosub goright #false
         continue
      }

      ;look down
      set %conditional %step - 1
      if %board . %pathdown  = %conditional
      {
         menu set status8 going down
         gosub godown #false
         continue
      }


      ;look left
      set %conditional %step - 1
      if %board . %pathleft  = %conditional
      {
         menu set status8 going left
         gosub goleft #false
         continue
      }

      ;look up
      set %conditional %step - 1
      if %board . %pathup  = %conditional
      {
         menu set status8 going up
         gosub goup #false
         continue
      }
      
      ;check new paths
      ;look right
      if %board . %pathright = zz
      {
         menu set status8 going right
         gosub goright #true
         continue
      }

      ;look down
      if %board . %pathdown = zz
      {
         menu set status8 going down
         gosub godown #true
         continue
      }


      ;look left
      if %board . %pathleft = zz
      {
         menu set status8 going left
         gosub goleft #true
         continue
      }

      ;look up
      if %board . %pathup = zz
      {
         menu set status8 going up
         gosub goup #true
         continue
      }
      set %resetclickx %leftx + #contposx
      set %resetclicky %lefty + #contposy
      click %resetclickx %resetclicky r
      gosub reset
      goto startover
  }
}
    
sub InitMenu
    menu clear
    menu window title Thor's circuit trainer
    menu window size 320 300
    menu window color $E0E0E0
    menu font bgcolor $E0E0E0
    menu font name MS Sans Serif
    menu font size 8
    menu font style b
    menu text status0 0 0 Initializing
    menu text status1 0 20 Initializing
    menu text status2 0 40 Initializing
    menu text status3 0 60 Initializing
    menu text status4 0 80 Initializing
    menu text status5 0 100 Initializing
    menu text status6 0 120 Initializing
    menu text status7 0 140 Initializing
    menu text status8 0 160 Initializing
    menu text status9 0 180 Initializing
    menu show
return

sub reset

  gosub usecttk

  while ! #result
  {
        gosub usecttk
  }

  ; reset to the beginning
  set %step 23

  ; set starting locatoin as a clear path
  set %currentx 1
  set %currenty 1

  set %reset #true

return

sub goright
     set %clearvalues %1
     gosub clickrandom %rightx %righty
     ; check if we're still in the game
     gosub waitingformygump contname generic_gump contsize 629_414 10
     if #result
     {
       ;if we can move forward, then update pointers!
       set %step %step - 1
       set %currentx %currentx + 1
       set %board . %currentx , %currenty  %step

       if %clearvalues
       {
         ; remove all the old "blocked" paths because since we moved, now maybe they aren't blocked anymore.
         if %board . %pathright = xx
            set %board . %pathright zz
         if %board . %pathleft = xx
            set %board . %pathleft zz
         if %board . %pathup = xx
            set %board . %pathup zz
         if %board . %pathdown = xx
            set %board . %pathdown zz
       }
       return #true
     }
     else
     {
         ;if we can't, mark the path as blocked and start over
         set %board . %pathright xx
         gosub reset
         return #false
     }
return

sub goleft
     set %clearvalues %1
    gosub clickrandom %leftx %lefty
    ; check if we're still in the game
    gosub waitingformygump contname generic_gump contsize 629_414 10
    if #result
    {
      ; if we can move forward, then quick stalling, do it!
      set %step %step - 1
      set %currentx %currentx - 1
      set %board . %currentx , %currenty  %step

       if %clearvalues
       {
        ; remove all the old "blocked" paths because since we moved, now maybe they aren't blocked anymore.
        if %board . %pathright = xx
           set %board . %pathright zz
        if %board . %pathleft = xx
           set %board . %pathleft zz
        if %board . %pathup = xx
           set %board . %pathup zz
        if %board . %pathdown = xx
           set %board . %pathdown zz
      }

      return #true
    }
    else
    {
       ;if we can't, mark the path as blocked
       set %board . %pathleft xx
       gosub reset
       return #false
    }

return

sub goup
     set %clearvalues %1
     gosub clickrandom %upx %upy
     ; check if we're still in the game
     gosub waitingformygump contname generic_gump contsize 629_414 10
     if #result
     {
       ; if we can move forward, then quick stalling, do it!
       set %step %step - 1
       set %currenty %currenty - 1

       if %clearvalues
       {
         ; remove all the old "blocked" paths because since we moved, now maybe they aren't blocked anymore.
         set %board . %currentx , %currenty  %step
         if %board . %pathright = xx
            set %board . %pathright zz
         if %board . %pathleft = xx
            set %board . %pathleft zz
         if %board . %pathup = xx
            set %board . %pathup zz
         if %board . %pathdown = xx
            set %board . %pathdown zz
       }
       
       return #true
     }
     else
     {
         ;if we can't, mark the path as blocked
         set %board . %pathup xx
         gosub reset
         return #false
     }
return

sub godown
     set %clearvalues %1
     gosub clickrandom %downx %downy
     ; check if we're still in the game
     gosub waitingformygump contname generic_gump contsize 629_414 10
     if #result
     {
        ; if we can move forward, then quick stalling, do it!
        set %step %step - 1
        set %currenty %currenty + 1
        set %board . %currentx , %currenty  %step

       if %clearvalues
       {
          ; remove all the old "blocked" paths because since we moved, now maybe they aren't blocked anymore.
          if %board . %pathright = xx
            set %board . %pathright zz
          if %board . %pathleft = xx
            set %board . %pathleft zz
          if %board . %pathup = xx
            set %board . %pathup zz
          if %board . %pathdown = xx
            set %board . %pathdown zz
        }
        
        return #true
     }
     else
     {
        ;if we can't, mark the path as blocked
        set %board . %pathdown xx
        gosub reset
        return #false
     }
return

;==================================================
;==================================================
sub clickthereddata
set %upx 450
set %upy 186
set %downx 450
set %downy 245
set %leftx 410
set %lefty 225
set %rightx 475
set %righty 225
return
;==================================================
;==================================================
sub clickrandom
wait
set %makeitrandomx %1
set %makeitrandomy %2
set %random1 #random % 7 + %makeitrandomx          ;   Make
set %clickrandom1 %random1 + #contposx             ;   a
set %random2 #random % 7 + %makeitrandomy          ;   Random
set %clickrandom2 %random2 + #contposy             ;   Click
click %clickrandom1 %clickrandom2 dmc
wait 5
return
;==================================================
;==================================================
sub waitingformygump
set %gumptimeout #scnt2 + %5
waitingformygump:
if # . %1 <> %2 && # . %3 <> %4
   {
    if %gumptimeout < #scnt2
    {
         return #false
    }
    goto waitingformygump
   }
return #true
;==================================================
;==================================================
sub findkit
findkit:
finditem %trainingkit c_ , #backpackid
if #findcnt < 1
   stop
event property #findid
if circuit notin #property 2
   ignoreitem #findid
   goto findkit
set %mytr #findid
return
;==================================================
;==================================================
sub usecttk
set #ltargetid %mytr
set #ltargetkind 1
event macro 13 48
target 5s
event macro 22
gosub waitingformygump contname generic_gump contsize 629_414 20
if ! #result
{
   return #false
}
wait 5
return #true
;==================================================
;==================================================
;455 186 462 186 ; oben
;455 243 462 243 ; oben
;455 245 462 345 ; unten
;455 302 462 302 ; unten
;414 225 436 225 ; links
;414 264 436 264 ; links
;479 225 503 225 ; rechts
;479 264 503 264 ; rechts
