;==================================================
; Script Name: Remove Trap Circuit Training
; Author: Onkelatze
; Version: 1.00
; Client Tested with: 7.0.76.0
; EUO version tested with: 1.50 ver. xxx
; Shard OSI
; Revision Date: 26/05/19
; Public Release: 29/06/19
; Circuit Trap Kits are available for purchase from the Oddities Trader at the Lycaeum.
; Start Script up to 75 Remove Trap very fast. To busy to solved > 75 gain :D  Only for 9*9!
;==================================================
;==================================================

set %size 5 ; change for smaller or bigger

;==================================================
;==================================================

gosub InitMenu

;0 build board
;x = blocked
;y = clear path
;z = maybe
;a = path traveled
for %x 1 %size
{
  for %y 1 %size
  {
      set %board . %x , %y zz
  }
}

;1 find kit
set #lpc 400
set %trainingkit LBKC
gosub clickthereddata
gosub findkit
set %step 23
set %board11 %step
set %foundlocatoins 1

;2 reset state, open kit and move to remembered location
set %secondrunatthis 1
gosub reset

;3 check new direction
;- if it's a wall, write down the blocked

while %currentx , %currenty <> 55
{
  if %reset
  {
     gosub jumpforward
     set %reset #false
  }
    ;look right
    set %toedip %currentx + 1
    set %pathright %toedip , %currenty
    if %board . %pathright = zz
    {
       gosub goright
       if #result
       {
       set %board . %currentx , %currenty  %step
       if %board . %pathright = xx
          set %board . %pathright zz
       if %board . %pathleft = xx
          set %board . %pathleft zz
       if %board . %pathup = xx
          set %board . %pathup zz
       if %board . %pathdown = xx
          set %board . %pathdown zz
        set %foundlocatoins %foundlocatoins + 1
        continue
       }
       else
           gosub reset
    }

    ;look down
    set %toedip %currenty + 1
    set %pathdown %currentx , %toedip
    if %board . %pathdown = zz
    {
       gosub godown
       if #result
       {
         set %board . %currentx , %currenty  %step
         if %board . %pathright = xx
            set %board . %pathright zz
         if %board . %pathleft = xx
            set %board . %pathleft zz
         if %board . %pathup = xx
            set %board . %pathup zz
         if %board . %pathdown = xx
            set %board . %pathdown zz
          set %foundlocatoins %foundlocatoins + 1
          continue
       }
       else
           gosub reset
    }


    ;look left
    set %toedip %currentx - 1
    set %pathleft %toedip , %currenty
    if %board . %pathleft = zz
    {
       gosub goleft
       if #result
       {
         set %currentx %toedip
         set %board . %currentx , %currenty  %step
         if %board . %pathright = xx
            set %board . %pathright zz
         if %board . %pathleft = xx
            set %board . %pathleft zz
         if %board . %pathup = xx
            set %board . %pathup zz
         if %board . %pathdown = xx
            set %board . %pathdown zz
         set %foundlocatoins %foundlocatoins + 1
         continue
       }
       else
           gosub reset
    }
       
    ;look up
    set %toedip %currenty - 1
    set %pathup %currentx , %toedip
    if %board . %pathup = zz
    {
       gosub goup
       if #result
       {
         set %currenty %toedip
         set %board . %currentx , %currenty  %step
         if %board . %pathright = xx
            set %board . %pathright zz
         if %board . %pathleft = xx
            set %board . %pathleft zz
         if %board . %pathup = xx
            set %board . %pathup zz
         if %board . %pathdown = xx
            set %board . %pathdown zz
         set %foundlocatoins %foundlocatoins + 1
         continue
       }
       else
           gosub reset
    }
}
    
    
sub InitMenu
    menu clear
    menu window title Thor's circuit trainer
    menu window size 320 300
    menu window color $E0E0E0
    menu font bgcolor $E0E0E0
    menu font name MS Sans Serif
    menu font size 8
    menu font style b
    menu text status0 0 0 Initializing
    menu text status1 0 20 Initializing
    menu text status2 0 40 Initializing
    menu text status3 0 60 Initializing
    menu text status4 0 80 Initializing
    menu text status5 0 100 Initializing
    menu text status6 0 120 Initializing
    menu text status7 0 140 Initializing
    menu text status8 0 160 Initializing
    menu text status9 0 180 Initializing
    menu show
return

sub reset

  gosub usecttk

  ; reset to the beginning
set %step 23

  ; set starting locatoin as a clear path
  set %currentx 1
  set %currenty 1

set %reset #true

return

sub jumpforward
  set %pathforward #true

  while %pathforward
  {
            ;look right
      set %toedip %currentx + 1
      set %pathright %toedip , %currenty
      set %conditional %step - 1
      if %board . %pathright = %conditional
      {
         gosub goright

         if #result
            continue
         else 2
             event SysMessage We got a problem going right
             halt
      }

      ;look down
      set %toedip %currenty + 1
      set %pathdown %currentx , %toedip
      set %conditional %step - 1
      if %board . %pathdown  = %conditional
      {

         gosub godown
         if #result
         {
            continue
         }
         else
         {
             event SysMessage We got a problem going down
             halt
         }
      }


      ;look left
      set %toedip %currentx - 1
      set %pathleft %toedip , %currenty
      set %conditional %step - 1
      if %board . %pathleft  = %conditional
      {
         gosub goleft
         if #result
            continue
         else 2
             event SysMessage We got a problem going left
             halt
      }

      ;look up
      set %toedip %currenty - 1
      set %pathup %currentx , %toedip
      set %conditional %step - 1
      if %board . %pathup  = %conditional
      {
         gosub goup
         if #result
            continue
         else 2
             event SysMessage We got a problem going up
             halt
      }
      ; if we're this far it's because there is no more path forward
      set %pathforward #false
  }

return

sub goright

    menu set status1 %board11 , #spc , %board21 , #spc , %board31 , #spc , %board41 , #spc , %board51
    menu set status2 %board12 , #spc , %board22 , #spc , %board32 , #spc , %board42 , #spc , %board52
    menu set status3 %board13 , #spc , %board23 , #spc , %board33 , #spc , %board43 , #spc , %board53
    menu set status4 %board14 , #spc , %board24 , #spc , %board34 , #spc , %board44 , #spc , %board54
    menu set status5 %board15 , #spc , %board25 , #spc , %board35 , #spc , %board45 , #spc , %board55
    menu set status6 pathright: , %pathright
    menu set status7 position: , %currentx , %currenty
    menu set status8 pathright value: , %board . %pathright

     gosub clickrandom %rightx %righty
     ; check if we're still in the game
     gosub waitingformygump contname generic_gump contsize 629_414 10
     if #result
     {
       ; if we can move forward, then update pointers!
       set %step %step - 1
       set %currentx %toedip
       return #true
     }
     else
     {
         ;if we can't, mark the path as blocked
         set %board . %pathright xx
         return #false
     }
return

sub goleft
    menu set status1 %board11 , #spc , %board21 , #spc , %board31 , #spc , %board41 , #spc , %board51
    menu set status2 %board12 , #spc , %board22 , #spc , %board32 , #spc , %board42 , #spc , %board52
    menu set status3 %board13 , #spc , %board23 , #spc , %board33 , #spc , %board43 , #spc , %board53
    menu set status4 %board14 , #spc , %board24 , #spc , %board34 , #spc , %board44 , #spc , %board54
    menu set status5 %board15 , #spc , %board25 , #spc , %board35 , #spc , %board45 , #spc , %board55
    menu set status6 pathleft: , %pathleft
    menu set status7 position: , %currentx , %currenty
    menu set status8 pathleft value: , %board . %pathleft
    menu set status9 step: , %step


;==========================================debug======================================
if %board54 = xx && %step = 13
{
set %position %currentx , %currenty
    menu set status1 %board11 , #spc , %board21 , #spc , %board31 , #spc , %board41 , #spc , %board51
    menu set status2 %board12 , #spc , %board22 , #spc , %board32 , #spc , %board42 , #spc , %board52
    menu set status3 %board13 , #spc , %board23 , #spc , %board33 , #spc , %board43 , #spc , %board53
    menu set status4 %board14 , #spc , %board24 , #spc , %board34 , #spc , %board44 , #spc , %board54
    menu set status5 %board15 , #spc , %board25 , #spc , %board35 , #spc , %board45 , #spc , %board55
    menu set status6 pathleft: , %pathleft
    menu set status7 position: , %currentx , %currenty
    menu set status8 pathleft value: , %board . %pathleft
    menu set status9 debug: , %leftx , %lefty
    halt
}
;==========================================debug======================================

     sub clickrandom %leftx %lefty
     ; check if we're still in the game
     gosub waitingformygump contname generic_gump contsize 629_414 10
     if #result
     {
       ; if we can move forward, then quick stalling, do it!
       set %step %step - 1
       set %currentx %toedip
       return #true
     }
     else
     {
         ;if we can't, mark the path as blocked
         set %board . %pathleft xx
         return #false
     }

return

sub goup
    menu set status1 %board11 , #spc , %board21 , #spc , %board31 , #spc , %board41 , #spc , %board51
    menu set status2 %board12 , #spc , %board22 , #spc , %board32 , #spc , %board42 , #spc , %board52
    menu set status3 %board13 , #spc , %board23 , #spc , %board33 , #spc , %board43 , #spc , %board53
    menu set status4 %board14 , #spc , %board24 , #spc , %board34 , #spc , %board44 , #spc , %board54
    menu set status5 %board15 , #spc , %board25 , #spc , %board35 , #spc , %board45 , #spc , %board55
    menu set status6 pathup: , %pathup
    menu set status7 position: , %currentx , %currenty
    menu set status8 pathup value: , %board . %pathup

     gosub clickrandom %upx %upy
     ; check if we're still in the game
     gosub waitingformygump contname generic_gump contsize 629_414 10
     if #result
     {
       ; if we can move forward, then quick stalling, do it!
       set %step %step - 1
       set %currenty %toedip
       return #true
     }
     else
     {
         ;if we can't, mark the path as blocked
         set %board . %pathup xx
         return #false
     }
return

sub godown
    menu set status1 %board11 , #spc , %board21 , #spc , %board31 , #spc , %board41 , #spc , %board51
    menu set status2 %board12 , #spc , %board22 , #spc , %board32 , #spc , %board42 , #spc , %board52
    menu set status3 %board13 , #spc , %board23 , #spc , %board33 , #spc , %board43 , #spc , %board53
    menu set status4 %board14 , #spc , %board24 , #spc , %board34 , #spc , %board44 , #spc , %board54
    menu set status5 %board15 , #spc , %board25 , #spc , %board35 , #spc , %board45 , #spc , %board55
    menu set status6 pathdown: , %pathdown
    menu set status7 position: , %currentx , %currenty
    menu set status8 pathdown value: , %board . %pathdown


     gosub clickrandom %downx %downy
     ; check if we're still in the game
     gosub waitingformygump contname generic_gump contsize 629_414 10
     if #result
     {
       ; if we can move forward, then quick stalling, do it!
       set %step %step - 1
       set %currenty %toedip
       return #true
     }
     else
     {
         ;if we can't, mark the path as blocked
         set %board . %pathdown xx
         return #false
     }
return

;==================================================
;==================================================
sub clickthereddata
set %upx 450
set %upy 186
set %downx 450
set %downy 245
set %leftx 410
set %lefty 225
set %rightx 475
set %righty 225
return
;==================================================
;==================================================
sub clickrandom
wait
set %makeitrandomx %1
set %makeitrandomy %2
set %random1 #random % 7 + %makeitrandomx          ;   Make
set %clickrandom1 %random1 + #contposx             ;   a
set %random2 #random % 7 + %makeitrandomy          ;   Random
set %clickrandom2 %random2 + #contposy             ;   Click
click %clickrandom1 %clickrandom2 dmc
wait 5
return
;==================================================
;==================================================
sub waitingformygump
set %gumptimeout #scnt2 + %5
waitingformygump:
if # . %1 <> %2 && # . %3 <> %4
   {
    if %gumptimeout < #scnt2
         return #false
    goto waitingformygump
   }
return #true
;==================================================
;==================================================
sub findkit
findkit:
finditem %trainingkit c_ , #backpackid
if #findcnt < 1
   stop
event property #findid
if circuit notin #property 2
   ignoreitem #findid
   goto findkit
set %mytr #findid
return
;==================================================
;==================================================
sub usecttk
set #ltargetid %mytr
set #ltargetkind 1
event macro 13 48
target 5s
event macro 22
gosub waitingformygump contname generic_gump contsize 629_414 50
if ! #result
   return #false
wait 5
return #true
;==================================================
;==================================================
;455 186 462 186 ; oben
;455 243 462 243 ; oben
;455 245 462 345 ; unten
;455 302 462 302 ; unten
;414 225 436 225 ; links
;414 264 436 264 ; links
;479 225 503 225 ; rechts
;479 264 503 264 ; rechts
